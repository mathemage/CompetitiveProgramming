Used as: Division Two - Level Two:

    Value 	500
    Submission Rate 	116 / 302 (38.41%)
    Success Rate 	88 / 116 (75.86%)
    High Score 	BjarkeDahlEbert for 484.37 points (5 mins 8 secs)
    Average Score 	304.50 (for 88 correct submissions)

Used as: Division One - Level One:

    Value 	250
    Submission Rate 	165 / 202 (81.68%)
    Success Rate 	144 / 165 (87.27%)
    High Score 	connect4 for 248.74 points (2 mins 1 secs)
    Average Score 	191.58 (for 144 correct submissions)

When I first encountered this trick, I immediately thought of a non-trivial solution to this problem. I later was shown a somewhat trivial solution to this problem, but the math to prove it is difficult, so I'll go over the non-trivial solution first. The easiest way to think about this problem is to do it backwards. There are two numbers x and y which have the same group of non-zero digits. When you subtract them you get z. If you remove a digit from z, you get the input. So if we think about getting back to z from the input, you insert a digit. If we try all digits 1 - 9 at all 4 locations, there are only 4 * 9 or 36 different possible values for z. Now, we can modify the formula from:

y - x = z

to

y = x + z

If we loop through all the possibilities for z, and all the possibilities for x, we can calculate the answer for y. When we have x and y, we just check to see if they have the same group of digits. Here is some C++ code which does the trick:

bool digitsMatch(int x, int y)
{
  vector<int> ndigits(10);
  while(x)
  {
    if(x % 10)
      ndigits[x % 10]++;
    x /= 10;
  }
  while(y)
  {
    if(y % 10)
      ndigits[y % 10]--;
    y /= 10;
  }
  for(int i = 0; i < ndigits.size(); i++)
    if(ndigits[i] != 0)
      return false;
  return true;
}

Now, the trivial solution. If we assume there is a function DS, which calculates the digit sum of an integer, the answer is simply 9 - DS(leftOver) % 9. However, the math to prove this is certainly non-trivial. Despite this fact, many coders either already knew this solution, guessed it correctly, or proved it out during the challenge (BEHiker57W is one of the provers), which lead to a lot of very quick solutions. In any case, here is a proof, compiled from notes from BEHiker57W, AdminBrett, and lars2520 (Forgive me for the informal proof, but math proofs are not my thing):

First, we prove that any number subtracted from another number with the same group of digits is divisible by 9. To do this we break up a number x into its digits and powers of 10. For example, abcd becomes a*1000 + b*100 + c*10 + d*1. If we now swap two digits, like a and b, we can achieve this by subtracting the current terms for a and b, and adding back new terms with the correct multipliers. So our number would now be abcd - 1000a + 100a - 100b + 1000b. Now, we note that any time you subtract 10^n from 10^m, you get a multiple of 9. For example 1000 - 1 = 999, 1000 - 10 == 990, etc. So basically, the difference between the two numbers is a multiple of 9. If you move around all the digits, you get some number d as the difference between the two numbers, where d is a multiple of 9.

Most people remember from early math that any number that is a multiple of 9 has digits that add up to be a multiple of 9. For those who need proof, here it is:

We must prove that DS(n + 1) % 9 is the same as (DS(n) + 1) % 9. In order to do this, we prove that the digit sum goes up by 1 (mod 9) every time you add 1 to a number. In the cases where the least significant digit of n is not 9, this is trivially true, since the digit sum always goes up by 1. However, when the least significant digit in n IS 9, then the least significant digit goes down by 9, and the next digit goes up by 1. If we are looking for the mod 9 result, however, this is a net change of 1, since the -9 does not affect the DS (mod 9). This is true no matter how many digits are wrapped from 9 to 0. So for any number n, we now can prove DS(n) % 9 == n % 9. We can prove this by reducing DS(n) to DS(n - 1) + 1, DS(n - 2) + 2, etc. until we get DS(n - n) + n. Since DS(n - n) is 0, the only thing that is left is the n on the outside.

Now, to apply that to a multiple of 9, DS(9*x) % 9 == (9*x) % 9 = 0. Therefore, the digits in a multiple of 9 must add up to a multiple of 9.

To summarize, for the trivial solution, all you need to realize is that the difference between the two numbers is a multiple of 9, and therefore its digits add up to a multiple of 9. To fix the 3 remaining digits into a 4 digit multiple of 9, you just add a digit which makes the digit sum a multiple of 9. Hence the solution 9 - DS(leftOver) % 9. The reason you can't remove a 0 from the number is because then it is unclear whether a 9 or a 0 was removed, since the digit sum of the remaining number is still 0 % 9 in either case. That is why 0 was not allowed to be removed when running the algorithm. 
